--- output from src/build_model.py
Loading the rating data
R.shape=(12401, 1201)
Building NMF models and Finding k latent features
R.shape=(12401, 1201), U.shape=(12401, 10), V.shape=(10, 1201),
nmf_err=330.4279
Time to run NMF: 17.309 secs
# grps=55, # users=12401, min/max grp size=31, 786
most common size of groups:
[(201, 2), (166, 2), (68, 2), (128, 1), (132, 1), (142, 1), (786, 1), (147, 1),
(149, 1), (540, 1), (157, 1), (287, 1), (160, 1), (197, 1), (420, 1), (40, 1),
(308, 1), (181, 1), (182, 1), (73, 1), (185, 1), (59, 1), (60, 1), (64, 1),
(246, 1), (455, 1), (72, 1), (457, 1), (55, 1), (204, 1), (78, 1), (82, 1),
(339, 1), (341, 1), (292, 1), (474, 1), (603, 1), (221, 1), (95, 1), (224, 1),
(571, 1), (229, 1), (105, 1), (365, 1), (31, 1), (368, 1), (241, 1), (117, 1),
(118, 1), (248, 1), (249, 1), (254, 1)]
Time to find peers: 5.054 secs
Time to find topic from peers: 34.923 secs
Time to find talks from topic: 0.008 secs
Time to pick one talk from candidates: 194.208 secs



--- output from src/clean_data.py
Merging talk data from idiap and my scraping results
idf.shape = (1203, 15), mdf.shape = (2318, 26), tdf.shape = (2318, 29)

Transforming user data from merged talk data and idiap user data
<class 'pandas.core.frame.DataFrame'>
Int64Index: 129633 entries, 0 to 129632
Data columns (total 5 columns):
uid_idiap      129633 non-null object
fav_title      129633 non-null object
fid            129633 non-null int64
title_idiap    129557 non-null object
tid            129557 non-null float64
dtypes: float64(1), int64(1), object(3)
memory usage: 5.9+ MB
None
rdf.shape = (129557, 5)


-- apr, 2012
Talks: 1149
Speakers: 961
Users: 69023
Active Users: 10962
Tags: 300
Themes: 48
Transcripts: 1102
Related Videos: 3002
Favorites: 108476
Comments: 201934
--

-- sep, 2012
Talks: 1203
Speakers: 1006
Users: 74760
Active Users: 12605
Tags: 298
Themes: 46
Transcripts: 1203
Related Videos: 3090
Favorites: 134533
Comments: 209566
--

m users, n talks, k latent features
create rating_df = (user_id, fav_talk_id) data
run matrix factorization based on rating_df, U x V
for each user "ui", rank k latent features
define peers "pi" for the user "ui" as users with same top 2 latent features
calculate average rank for each k-2 latent features
define potential learning topic "Li" as the latent features with highest average rankings
define potential interested talks "ti" as top 10 talks for latent feature "Li" from V
calculate the rating distance between favorite talks and the potential interested talks
find the recommended talk "ri" with smallest distance

ui: user i
pi: peers for user i
Li: potential most interested learning topic
ti: potential most interested talks of Li
ri: recommended talk for user i


